package jdbc;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import jdbc.util.СonnectionManager;

public class JdbcRunner {
	public static void main(String[] args) throws SQLException {
		/*Практика JDBC №1*/
//		try (Connection connection = СonnectionManager.open();
//		    Statement statement = connection.createStatement()) {
//			System.out.println("Connection success!");
		/*Различные варианты запросов*/
//			String sql = "Create table if not exists info ("
//					+ "id serial primary key,"
//					+ "data text not null"
//					+ ")";
//			String sql = "insert into info (data) values"
//					+ "('Test1'),"
//					+ "('Test2'),"
//					+ "('Test3'),"
//					+ "('Test4');";
//			String sql = "update info "
//					+ 	 "set data = 'TestTest' "
//					+    "where id = 5 ";

		
			/*Метод, позволяющий получить уровен изолированности транзакции*/
//			System.out.println(connection.getTransactionIsolation());
		    
		    /*Универсальный метод, исполняющий SQL запрос*/
//			boolean executeResult = statement.execute(sql);
		    
			/*Используем данный метод, в случае, если нам надо узнать кол-во обновленных строчек
			*при использовании метода execute()*/
//			System.out.println(statement.getUpdateCount());	
		    	
			/*Данный метод возвращает кол-во обновленных строчек*/
//			int executeResult = statement.executeUpdate(sql);
		    	
			/*executeQuery() возвращает ResultSet - подходит для select-ов*/
//			ResultSet executeResult = statement.executeQuery(sql);
//			while (executeResult.next()) {
//				System.out.println(executeResult.getLong("id"));
//				System.out.println(executeResult.getString("passenger_num"));
//				System.out.println(executeResult.getBigDecimal("cost"));
//				System.out.println("---------");
//			}	
		    	
		    /*Когда необходимо узнать только что созданный автогенерируемый id, пользуемся данным набором команд*/	
		    	/*Пример запроса*/	
//				String sql = "insert into info (data)"
//				+ "   values"
//				+ "	  ('autogenerated')";
//				String sql = "select * from ticket ";
//			int executeResult = statement.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);
//			ResultSet generatedKeys= statement.getGeneratedKeys();
//			if (generatedKeys.next()) {
//				var generatedId = generatedKeys.getInt("id");
//				System.out.println(generatedId);
//			}
//			Что использовать, if или while, зависит от ситуцации 		    	
//		} Закрытие statement, в рамках которого и осуществлялись запросы
		
		/*Практика JDBC №2*/
		/*Получаем идентификаторы билетов по flight_id из БД*/
//		String flightId = "2 or 1 = 1; drop table info";
//		List<Long> result = getTicketsByFlightId(flightId);
//		System.out.println(result);
		
		/*Практика JDBC №3*/
		/*Получаем идентификаторы билетов по flight_id из БД*/
		/*Меняем String на Long относительно примера выше*/
//		Long flightId = 2L;
//		List<Long> result = getTicketsByFlightId(flightId);
//		System.out.println(result);
		
		/*Практика JDBC №3.1*/
//		List<Long> result = getFlightsBetween(LocalDate.of(2020, 10, 1).atStartOfDay(), LocalDateTime.now());
//		System.out.println(result);
		
		/*Практика JDBC №4*/
		/*Получаем метаданные*/
		/*checkMetadata();*/
		
		/*Практика JDBC №5*/
		/*Работа с пулом соединений*/
		try {
			checkMetadata();
		} finally {
			СonnectionManager.closePool();
		}
		
	}//main
		/*Практика JDBC №2*/
		/*Наглядное демонстрирование недостатков Statement, а именно подверженности SQL Injection*/
//	private static List<Long> getTicketsByFlightId(String flightId) throws SQLException {
//	String sql = "select id from ticket where flight_id = " + flightId;
//	List<Long> result = new ArrayList<Long>();
//	try (Connection connection = СonnectionManager.open();
//		Statement statement = connection.createStatement()) {
//		ResultSet executionResult = statement.executeQuery(sql);
//		while (executionResult.next()) {
//			/*Используем getObject, а не getLong(), потому, что в случае, если
//			 *мы столкнемся с null-ом - вылетит эксепшен, т.к. его в притивный тип
//			 *преобразовать не получится*/
//			result.add(executionResult.getObject("id", Long.class));
//		}
//	}
//	return result;	
//	}
		/*Практика JDBC №3*/
		/*Перепишем пример выше с помощью prepareStatement*/
//	private static List<Long> getTicketsByFlightId(Long flightId) throws SQLException {
//	String sql = "select id from ticket where flight_id =?";
//	List<Long> result = new ArrayList<Long>();
//	try (Connection connection = СonnectionManager.open();
//		PreparedStatement prepareStatement = connection.prepareStatement(sql)) {
//		prepareStatement.setLong(1, flightId);
//		
//		/*Все методы execute, которые принимают sql запросы не работают для prepareStatement*/
//		ResultSet executionResult = prepareStatement.executeQuery();
//		while (executionResult.next()) {
//			/*Используем getObject, а не getLong(), потому, что в случае, если
//			 *мы столкнемся с null-ом - вылетит эксепшен, т.к. его в притивный тип
//			 *преобразовать не получится*/
//			result.add(executionResult.getObject("id", Long.class));
//		}
//	}
//	return result;	
//	}
		/*Практика JDBC №3.1*/
		/*Попрактикуемся еще немного и найдем все наши айдишники перелетов, между датами, которые мы передали*/
//	private static List<Long> getFlightsBetween(LocalDateTime start, LocalDateTime end) throws SQLException {
//		String sql = "select id from flight where departure_date between ? and ?";
//		List<Long> result = new ArrayList<Long>();
//		try (Connection connection = СonnectionManager.open();) {
//			PreparedStatement preparedStatement = connection.prepareStatement(sql);
//			preparedStatement.setFetchSize(50);
//			preparedStatement.setQueryTimeout(10);
//			preparedStatement.setMaxRows(100);
//			System.out.println(preparedStatement);
//			preparedStatement.setTimestamp(1, Timestamp.valueOf(start));
//			System.out.println(preparedStatement);
//			preparedStatement.setTimestamp(2, Timestamp.valueOf(end));
//			System.out.println(preparedStatement);
//			ResultSet resultSet = preparedStatement.executeQuery();
//			while (resultSet.next()) {
//				result.add(resultSet.getObject(1, Long.class));
//			}
//		}
//		return result;
//	}
//	
	/*Практика JDBC №4*/
	/*Знакомство с метаданными*/
	public static void checkMetadata() throws SQLException {
		try(Connection connection = СonnectionManager./*open()*/get()) {
			DatabaseMetaData metaData = connection.getMetaData();
			ResultSet catalogs =  metaData.getCatalogs();
			while (catalogs.next()) {
				String catalog = catalogs.getString("TABLE_CAT");
				ResultSet schemas = metaData.getSchemas();
				while (schemas.next()) {
					String schema = schemas.getString("TABLE_SCHEM");
					ResultSet tables = metaData.getTables(catalog, schema, "%", new String[] {"TABLE"});
					if (schema.equals("public")) {
						while (tables.next()) {
							System.out.println(tables.getString("TABLE_NAME"));
						}
					}
				}
			}
		}
	}
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
